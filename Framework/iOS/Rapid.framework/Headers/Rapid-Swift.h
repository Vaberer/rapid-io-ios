// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSOperationQueue (SWIFT_EXTENSION(Rapid))
@end

@class NSNull;
@class RapidCollectionRef;

/// Class representing a connection to Rapid.io database
SWIFT_CLASS("_TtC5Rapid5Rapid")
@interface Rapid : NSObject
/// Nil value
/// This value can be used in document merge (e.g. <code>["attribute": Rapid.nilValue]</code> would remove <code>attribute</code> from a document)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSNull * _Nonnull nilValue;)
+ (NSNull * _Nonnull)nilValue SWIFT_WARN_UNUSED_RESULT;
/// Placeholder for a server timestamp
/// When Rapid.io tries to write a json to a database it replaces every occurance of <code>serverTimestamp</code> with Unix timestamp
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull serverTimestamp;)
+ (NSString * _Nonnull)serverTimestamp SWIFT_WARN_UNUSED_RESULT;
/// API key that serves to connect to Rapid.io database
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
/// If <code>true</code> subscription values are stored locally to be available offline
@property (nonatomic) BOOL isCacheEnabled;
/// Initializes a Rapid instance
/// \param withApiKey API key that contains necessary information about a database to which you want to connect
///
///
/// returns:
/// New or previously initialized instance
+ (Rapid * _Nullable)getInstanceWithApiKey:(NSString * _Nonnull)apiKey SWIFT_WARN_UNUSED_RESULT;
/// Creates a new object representing Rapid collection
/// \param named Collection identifier
///
///
/// returns:
/// New object representing Rapid collection
- (RapidCollectionRef * _Nonnull)collectionWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Disconnect from server
- (void)goOffline;
/// Restore previously configured connection
- (void)goOnline;
/// Remove all subscriptions
- (void)unsubscribeAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Rapid (SWIFT_EXTENSION(Rapid))
/// Returns shared Rapid instance if it was previously configured by Rapid.configure()
///
/// throws:
/// <code>RapidInternalError.rapidInstanceNotInitialized</code> if shared instance hasnâ€™t been initialized with Rapid.configure()
///
/// returns:
/// Shared Rapid instance
+ (Rapid * _Nullable)sharedAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates an unique ID which can be safely used as your document ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uniqueID;)
+ (NSString * _Nonnull)uniqueID SWIFT_WARN_UNUSED_RESULT;
/// If <code>true</code> subscription values are stored locally to be available offline
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isCacheEnabled;)
+ (BOOL)isCacheEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsCacheEnabled:(BOOL)newValue;
/// Disconnect from server
+ (void)goOffline;
/// Restore previously configured connection
+ (void)goOnline;
/// Remove all subscriptions
+ (void)unsubscribeAll;
/// Configures shared Rapid instance
/// Initializes an instance that can be lately accessed through singleton class functions
/// \param withApiKey API key that contains necessary information about a database to which you want to connect
///
+ (void)configureWithApiKey:(NSString * _Nonnull)key;
/// Creates a new object representing Rapid collection
/// \param named Collection identifier
///
///
/// returns:
/// New object representing Rapid collection
+ (RapidCollectionRef * _Nonnull)collectionWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Deinitialize shared Rapid instance
+ (void)deinitialize;
@end

@class RapidDocumentRef;

/// Class representing Rapid.io collection
SWIFT_CLASS("_TtC5Rapid18RapidCollectionRef")
@interface RapidCollectionRef : NSObject
/// Collection identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionID;
/// Create an instance of a Rapid document in the collection with a new unique ID
///
/// returns:
/// Instance of <code>RapidDocument</code> in the collection with a new unique ID
- (RapidDocumentRef * _Nonnull)newDocument SWIFT_WARN_UNUSED_RESULT;
/// Get an instance of a Rapid document in the collection with a specified ID
/// \param id Document ID
///
///
/// returns:
/// Instance of a <code>RapidDocument</code> in the collection with a specified ID
- (RapidDocumentRef * _Nonnull)documentWithID:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface RapidCollectionRef (SWIFT_EXTENSION(Rapid))
@end

@class NSCoder;

/// Class representing Rapid.io document that is returned from a subscription handler
SWIFT_CLASS("_TtC5Rapid13RapidDocument")
@interface RapidDocument : NSObject <NSCoding>
/// Document ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Collection ID
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionID;
/// Document body
@property (nonatomic, readonly, copy) NSDictionary * _Nullable value;
/// Etag identifier
@property (nonatomic, readonly, copy) NSString * _Nullable etag;
/// Time of a document creation
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
/// Time of a document modification
@property (nonatomic, readonly, copy) NSDate * _Nullable modifiedAt;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Class representing Rapid.io document
SWIFT_CLASS("_TtC5Rapid16RapidDocumentRef")
@interface RapidDocumentRef : NSObject
/// ID of a collection to which the document belongs
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionID;
/// Document ID
@property (nonatomic, readonly, copy) NSString * _Nonnull documentID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface RapidDocumentRef (SWIFT_EXTENSION(Rapid))
@end


@interface NSTimer (SWIFT_EXTENSION(Rapid))
@end

#pragma clang diagnostic pop
