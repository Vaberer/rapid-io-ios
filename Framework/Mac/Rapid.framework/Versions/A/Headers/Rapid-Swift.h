// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import Dispatch;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSOperationQueue (SWIFT_EXTENSION(Rapid))
@end

@class NSNull;
@class RapidCollection;

/// Class representing a connection to Rapid.io database
SWIFT_CLASS("_TtC5Rapid5Rapid")
@interface Rapid : NSObject
/// Nil value
/// This value can be used in document merge (e.g. <code>["attribute": Rapid.nilValue]</code> would remove <code>attribute</code> from a document)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSNull * _Nonnull nilValue;)
+ (NSNull * _Nonnull)nilValue SWIFT_WARN_UNUSED_RESULT;
/// API key that serves to connect to Rapid.io database
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
/// If <code>true</code> subscription values are stored locally to be available offline
@property (nonatomic) BOOL isCacheEnabled;
/// Initializes a Rapid instance
/// \param withAPIKey API key that contains necessary information about a database to which you want to connect
///
///
/// returns:
/// New or previously initialized instance
+ (Rapid * _Nullable)getInstanceWithAPIKey:(NSString * _Nonnull)apiKey SWIFT_WARN_UNUSED_RESULT;
/// Authorize Rapid instance
/// \param accessToken Authorization access token
///
/// \param completion Authorization completion handler
///
- (void)authorizeWithAccessToken:(NSString * _Nonnull)accessToken completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Deauthorize Rapid instance
/// \param completion Deauthorization completion handler
///
- (void)deauthorizeWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Creates a new object representing Rapid collection
/// \param named Collection identifier
///
///
/// returns:
/// New object representing Rapid collection
- (RapidCollection * _Nonnull)collectionWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Disconnect from server
- (void)goOffline;
/// Restore previously configured connection
- (void)goOnline;
/// Remove all subscriptions
- (void)unsubscribeAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface Rapid (SWIFT_EXTENSION(Rapid))
/// Returns shared Rapid instance if it was previously configured by Rapid.configure()
///
/// throws:
/// <code>RapidInternalError.rapidInstanceNotInitialized</code> if shared instance hasnâ€™t been initialized with Rapid.configure()
///
/// returns:
/// Shared Rapid instance
+ (Rapid * _Nullable)sharedAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates an unique ID which can be safely used as your document ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uniqueID;)
+ (NSString * _Nonnull)uniqueID SWIFT_WARN_UNUSED_RESULT;
/// If <code>true</code> subscription values are stored locally to be available offline
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isCacheEnabled;)
+ (BOOL)isCacheEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsCacheEnabled:(BOOL)newValue;
/// Disconnect from server
+ (void)goOffline;
/// Restore previously configured connection
+ (void)goOnline;
/// Remove all subscriptions
+ (void)unsubscribeAll;
/// Authorize Rapid instance
/// \param accessToken Authorization access token
///
/// \param completion Authorization completion handler
///
+ (void)authorizeWithAccessToken:(NSString * _Nonnull)accessToken completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Deauthorize Rapid instance
/// \param completion Deauthorization completion handler
///
+ (void)deauthorizeWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Configures shared Rapid instance
/// Initializes an instance that can be lately accessed through singleton class functions
/// \param withAPIKey API key that contains necessary information about a database to which you want to connect
///
+ (void)configureWithAPIKey:(NSString * _Nonnull)key;
/// Creates a new object representing Rapid collection
/// \param named Collection identifier
///
///
/// returns:
/// New object representing Rapid collection
+ (RapidCollection * _Nonnull)collectionWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
/// Deinitialize shared Rapid instance
+ (void)deinitialize;
@end

@class RapidDocument;
@class RapidDocumentSnapshot;

/// Class representing Rapid.io collection
SWIFT_CLASS("_TtC5Rapid15RapidCollection")
@interface RapidCollection : NSObject
/// Collection identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionID;
/// Create an instance of a Rapid document in the collection with a new unique ID
///
/// returns:
/// Instance of <code>RapidDocument</code> in the collection with a new unique ID
- (RapidDocument * _Nonnull)newDocument SWIFT_WARN_UNUSED_RESULT;
/// Get an instance of a Rapid document in the collection with a specified ID
/// \param id Document ID
///
///
/// returns:
/// Instance of a <code>RapidDocument</code> in the collection with a specified ID
- (RapidDocument * _Nonnull)documentWithID:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Fetch collection
/// Only documents that match filters, orderings and limits that are assigned to the collection by the time of calling the function, are retured
/// \param completion Fetch callback which provides a client either with an error or with an array of documents
///
- (void)readOnceWithCompletion:(void (^ _Nonnull)(NSError * _Nullable, NSArray<RapidDocumentSnapshot *> * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface RapidCollection (SWIFT_EXTENSION(Rapid))
@end


/// Class representing Rapid.io document
SWIFT_CLASS("_TtC5Rapid13RapidDocument")
@interface RapidDocument : NSObject
/// ID of a collection to which the document belongs
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionID;
/// Document ID
@property (nonatomic, readonly, copy) NSString * _Nonnull documentID;
/// Mutate the document
/// All values in the document are replaced by values in the provided dictionary
/// \param value Dictionary with new values that the document should contain
///
/// \param completion Mutation callback which provides a client either with an error or with a successfully mutated object
///
- (void)mutateWithValue:(NSDictionary * _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)concurrencySafeMutateWithValue:(NSDictionary * _Nonnull)value etag:(NSString * _Nullable)etag completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Merge values in the document with new ones
/// Values that are not mentioned in the provided dictionary remains as they are.
/// Values that are mentioned in the provided dictionary are either replaced or added to the document.
/// \param value Dictionary with new values that should be merged into the document
///
/// \param completion merge callback which provides a client either with an error or with a successfully merged values
///
- (void)mergeWithValue:(NSDictionary * _Nonnull)value completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)concurrencySafeMergeWithValue:(NSDictionary * _Nonnull)value etag:(NSString * _Nullable)etag completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Delete the document
/// <code>Delete</code> is equivalent to <code>Mutate</code> with a value equal to <code>nil</code>
/// \param completion Delete callback which provides a client either with an error or with the document object how it looked before it was deleted
///
- (void)deleteWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)concurrencySafeDeleteWithEtag:(NSString * _Nonnull)etag completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Fetch document
/// \param completion Fetch callback which provides a client either with an error or with an array of documents
///
- (void)readOnceWithCompletion:(void (^ _Nonnull)(NSError * _Nullable, RapidDocumentSnapshot * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface RapidDocument (SWIFT_EXTENSION(Rapid))
@end

@class NSCoder;

/// Class representing Rapid.io document that is returned from a subscription callback
SWIFT_CLASS("_TtC5Rapid21RapidDocumentSnapshot")
@interface RapidDocumentSnapshot : NSObject <NSCoding>
/// Document ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull collectionID;
/// Document body
@property (nonatomic, readonly, copy) NSDictionary * _Nullable value;
/// Etag identifier
@property (nonatomic, readonly, copy) NSString * _Nullable etag;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSTimer (SWIFT_EXTENSION(Rapid))
@end

@class NSError;
@class NSStream;

SWIFT_CLASS("_TtC5Rapid9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) dispatch_queue_t _Nonnull callbackQueue;
@property (nonatomic, copy) void (^ _Nullable onConnect)(void);
@property (nonatomic, copy) void (^ _Nullable onDisconnect)(NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable onText)(NSString * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onData)(NSData * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onPong)(NSData * _Nullable);
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL disableSSLCertValidation;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable enabledSSLCipherSuites;
@property (nonatomic, copy) NSString * _Nullable origin;
@property (nonatomic) NSInteger timeout;
@property (nonatomic, readonly) BOOL isConnected;
@property (nonatomic, readonly, copy) NSURL * _Nonnull currentURL;
/// Used for setting protocols.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url protocols:(NSArray<NSString *> * _Nullable)protocols OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url writeQueueQOS:(NSQualityOfService)writeQueueQOS protocols:(NSArray<NSString *> * _Nullable)protocols;
/// Connect to the WebSocket server on a background thread.
- (void)connect;
/// Write a string to the websocket. This sends it as a text frame.
/// If you supply a non-nil completion block, I will perform it when the write completes.
/// \param string The string to write.
///
/// \param completion The (optional) completion handler.
///
- (void)writeWithString:(NSString * _Nonnull)string completion:(void (^ _Nullable)(void))completion;
/// Write binary data to the websocket. This sends it as a binary frame.
/// If you supply a non-nil completion block, I will perform it when the write completes.
/// \param data The data to write.
///
/// \param completion The (optional) completion handler.
///
- (void)writeWithData:(NSData * _Nonnull)data completion:(void (^ _Nullable)(void))completion;
/// Write a ping to the websocket. This sends it as a control frame.
/// Yodel a   sound  to the planet.    This sends it as an astroid. http://youtu.be/Eu5ZJELRiJ8?t=42s
- (void)writeWithPing:(NSData * _Nonnull)ping completion:(void (^ _Nullable)(void))completion;
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
